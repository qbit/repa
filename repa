#!/bin/sh

VERSION=0.0.1

usage() {
    cat <<EOF
${SNAME} ${VERSION} options:

  -s [store_name] Use a named store instead of the default 'repa' store.
  -h This information.

  Examples:
    Create a new repa store:
    
      repa init -s web_logins
EOF
    exit 0
}

while getopts "hs:" arg; do
    case $arg in
	h)
	    usage
	    ;;
	s)
	    STORE=$OPTARG
	    ;;
    esac
done

if [ -z "$STORE" ]; then
    STORE="repa"
fi

SNAME="${0##*/}"
STORE_DIR=~/.repa
REOP_OPTS="-p ${STORE_DIR}/${STORE}.pub -s ${STORE_DIR}/${STORE}.sec"
REPA_DB="${STORE_DIR}/${STORE}.db"

error() {
    >&2 echo "${SNAME}: $1"
    exit 1
}

pp() {
    # Entry, Login, Password, Notes
    E=$(echo "$1" | cut -d, -f1)
    L=$(echo "$1" | cut -d, -f2)
    P=$(echo "$1" | cut -d, -f3)
    N=$(echo "$1" | cut -d, -f4)
    
    P=$(decode "$P")
    N=$(decode "$N")
    
    printf "\nEntry: %s\nLogin: %s\nPassword: %s\nNotes: %s\n" "$E" "$L" "$P" "$N"
}

encrypt() {
    SRC=$1
    DEST=$2
    
    if [ ! -f "$SRC" ]; then
	error "Can't encrypt nonexistent file! ${SRC}"
    fi
    echo "Encrypting ${SRC}"
    reop -E -b $REOP_OPTS -m "$SRC" || error "Can't encrypt $SRC}"
    
    if [ ! -z "$DEST" ]; then
	mv "${SRC}.enc" "${DEST}" || error "Can't move db to new location: ${SRC}.enc -> ${DEST}"
    fi
    
    rm "$SRC"
    
}

decrypt_file() {
    reop -D $REOP_OPTS -x "${REPA_DB}.enc" -m "$1" || error "Can't decrypt ${REPA_DB}.enc!"
}

decrypt_stdout() {
    o=$(reop -D $REOP_OPTS -x "${REPA_DB}.enc" -m - || error "Can't decrypt ${REPA_DB}.enc!")
    printf "%s" "$o"
}

dump() {
    DB=$(decrypt_stdout)
    OIFS=$IFS
    IFS="
"
    for line in $DB; do
	pp "$line"
    done
    IFS=$OIFS
    echo
}

encode() {
    echo "$@" | perl -MMIME::Base64 -ne 'print encode_base64($_)'
}

decode() {
    echo "$@" | perl -MMIME::Base64 -ne 'print decode_base64($_)'
}

add_entry() {
    printf "Entry: "
    read -r ENTRY
    printf "Login: "
    read -r LOGIN
    printf "Password: "
    stty -echo
    read -r PASS
    stty echo
    echo 
    printf "Notes: "
    read -r NOTES
    
    PASS=$(encode "$PASS")
    NOTES=$(encode "$NOTES")
    
    entry="${ENTRY},${LOGIN},${PASS},${NOTES}"
    
    F=$(mktemp)
    decrypt_file "$F"
    echo "$entry" >> "$F"
    encrypt "$F" "${REPA_DB}.enc"
}

db_exists() {
    if [ ! -f ${REPA_DB}.enc ]; then
	error "DB ${REPA_DB}.enc doesn't exist! Plese run: '${SNAME} init'"
    fi
}

init() {
    if [ ! -d $STORE_DIR ]; then
	mkdir $STORE_DIR
	chmod 700 $STORE_DIR
    fi
    
    if [ ! -f "${REPA_DB}.enc" ]; then
		   
	
	echo "Generating new key pair."
	reop -G ${REOP_OPTS} || error "Can't create key pair!"
	echo "Creating store."
	touch $REPA_DB || error "Can't create db file!"
	encrypt "$REPA_DB"
    else
	echo "'${REPA_DB}.enc' already exists!"
	exit 1
    fi
}

dump_pass() {
    ENTRY=$(decrypt_stdout | grep "^${2}")
    PASS=$(echo "$ENTRY" | cut -d, -f3)
    PASS=$(decode "$PASS")
    echo "$PASS"
}

dump_entry() {
    ENTRY=$(decrypt_stdout | grep "^${2}")
    pp "$ENTRY"
}

case $1 in
    add)
	db_exists
	add_entry
	;;
    init)
	init
	;;
    pass)
	db_exists
	dump_pass "$2"
	;;
    show)
	db_exists
	dump_entry "$2"
	;;
    dump)
	db_exists
	dump
	;;
    help)
	usage
	;;
    *)
	usage
	;;
esac
